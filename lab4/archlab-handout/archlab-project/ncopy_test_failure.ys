
            .pos 0
            irmovq stack, %rsp
            irmovq data_to_copy, %rdi
            irmovq data_dst, %rsi
            irmovq $9, %rdx

            call ncopy
            halt
            nop
            nop
            nop
            nop
            nop
        
        ################################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Name:张乐天
# ID:2300012938

#思路：循环展开，以8为大小，然后再按4，2，1展开
#
# Describe how and why you modified the baseline code.
#
################################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:
################################################################################
# You can modify this portion
	# Loop header
    iaddq $-9,%rdx
    jl asd
Loop1:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	mrmovq 32(%rdi), %r12	# read val from src...
	mrmovq 40(%rdi), %r13	# read val from src...
	mrmovq 48(%rdi), %r14	# read val from src...
	mrmovq 56(%rdi), %rbp	# read val from src...
	mrmovq 64(%rdi), %rbx	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	rmmovq %r12, 32(%rsi)	# ...and store it to dst
	rmmovq %r13, 40(%rsi)	# ...and store it to dst
	rmmovq %r14, 48(%rsi)	# ...and store it to dst
	rmmovq %rbp, 56(%rsi)	# ...and store it to dst
	rmmovq %rbx, 64(%rdi) 	# read val from src...
	andq %r8, %r8		# val <= 0?
	jle L1		
	iaddq $1, %rax		# count++
L1:
	andq %r9, %r9		# val <= 0?
	jle L2		
	iaddq $1, %rax		# count++
L2:
	andq %r10, %r10		# val <= 0?
	jle L3		
	iaddq $1, %rax		# count++
L3:
	andq %r11, %r11		# val <= 0?
	jle L4		
	iaddq $1, %rax		# count++
L4:
	andq %r12, %r12		# val <= 0?
	jle L5		
	iaddq $1, %rax		# count++
L5:
	andq %r13, %r13		# val <= 0?
	jle L6		
	iaddq $1, %rax		# count++
L6:
	andq %r14, %r14		# val <= 0?
	jle L7
	iaddq $1, %rax		# count++
L7:
	andq %rbp, %rbp		# val <= 0?
	jle L8
	iaddq $1, %rax		# count++
L8:
	andq %rbx, %rbx		# val <= 0?
	jle L9
	iaddq $1, %rax		# count++
L9:
	iaddq $72,%rdi
	iaddq $72,%rsi
test:
	iaddq $-9,%rdx
	jge Loop1
asd:
	iaddq $4,%rdx
	jl asd2
	iaddq $-4,%rdx
Loop111:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	mrmovq 16(%rdi), %r10	# read val from src...
	mrmovq 24(%rdi), %r11	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	rmmovq %r10, 16(%rsi)	# ...and store it to dst
	rmmovq %r11, 24(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle L11		
	iaddq $1, %rax		# count++
L11:
	andq %r9, %r9		# val <= 0?
	jle L12		
	iaddq $1, %rax		# count++
L12:
	andq %r10, %r10		# val <= 0?
	jle L13
	iaddq $1, %rax		# count++
L13:
	andq %r11, %r11		# val <= 0?
	jle L14
	iaddq $1, %rax		# count++
L14:
	iaddq $32,%rdi
	iaddq $32,%rsi
asd2:
	iaddq $2,%rdx
	jl asd3
	iaddq $-2,%rdx
Loop112:	
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle L21		
	iaddq $1, %rax		# count++
L21:
	andq %r9, %r9		# val <= 0?
	jle L22		
	iaddq $1, %rax		# count++
L22:
	iaddq $16,%rdi
	iaddq $16,%rsi
asd3:
	iaddq $1,%rdx
	jl asd4
	iaddq $-1,%rdx
Loop113:
	mrmovq (%rdi), %r8	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle L31
	iaddq $1, %rax		# count++
L31:
	iaddq $8,%rdi
	iaddq $8,%rsi
asd4:
	iaddq $1,%rdx
	jl Done
	#iaddq $-1,%rdx
Loop114:
	mrmovq (%rdi), %r8	# read val from src...
	rmmovq %r8, (%rsi)	# ...and store it to dst
	andq %r8, %r8		# val <= 0?
	jle Done
	iaddq $1, %rax		# count++
Done:
	ret

# In grader, we will add a "trap: jmp trap" here, which traps your program in an
# infinite loop. Thus your function should always return instead of falling
# through till the end of the source code :)

        # do not fall through to the end of the source!
        # Otherwise you will encounter this trap :)
        trapititit: jmp trapititit

            .pos 0x1000 # source code + stack limits to 4kb
            .align 8
        stack:
        data_to_copy:
            .quad 0x831593e6b50ae928
.quad 0x29e12b2a1872d7db
.quad 0xb6362d8b640aec49
.quad 0x2e78698eb5bba4a9
.quad 0x9064494b8287afb9
.quad 0x4c04974c6c1b4767
.quad 0x5863b8685408be73
.quad 0x0e8ca571066bc302
.quad 0x088959d638956a37
        data_dst:
        